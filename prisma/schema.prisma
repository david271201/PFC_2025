// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RequestStatus {
  AGUARDANDO_CHEFE_FUSEX_1
  AGUARDANDO_CHEFE_AUDITORIA_1
  AGUARDANDO_AUDITOR
  AGUARDANDO_CHEFE_AUDITORIA_2
  AGUARDANDO_CHEFE_FUSEX_2
  AGUARDANDO_HOMOLOGADOR_SOLICITANTE_1
  AGUARDANDO_HOMOLOGADOR_SOLICITADA_1
  AGUARDANDO_CHEFE_DIV_MEDICINA_1
  AGUARDANDO_ESPECIALISTA
  AGUARDANDO_CHEFE_DIV_MEDICINA_2
  AGUARDANDO_COTACAO
  AGUARDANDO_CHEFE_DIV_MEDICINA_3
  AGUARDANDO_HOMOLOGADOR_SOLICITADA_2
  AGUARDANDO_HOMOLOGADOR_SOLICITANTE_2
  AGUARDANDO_CHEFE_FUSEX_3
  AGUARDANDO_PASSAGEM
  AGUARDANDO_CHEFE_FUSEX_4
  AGUARDANDO_HOMOLOGADOR_SOLICITANTE_3
  AGUARDANDO_CHEM_1
  AGUARDANDO_CHEFE_SECAO_REGIONAL_1
  AGUARDANDO_OPERADOR_SECAO_REGIONAL
  AGUARDANDO_CHEFE_SECAO_REGIONAL_2
  AGUARDANDO_CHEM_2
  AGUARDANDO_SUBDIRETOR_SAUDE_1
  AGUARDANDO_DRAS
  AGUARDANDO_SUBDIRETOR_SAUDE_2
  // AGUARDANDO_CHEM_3
  AGUARDANDO_CHEFE_DIV_MEDICINA_4
  AGUARDANDO_CHEFE_SECAO_REGIONAL_3
  AGUARDANDO_RESPOSTA
  AGUARDANDO_OPERADOR_FUSEX_REALIZACAO
  AGUARDANDO_OPERADOR_FUSEX_CUSTOS
  REPROVADO
  NECESSITA_CORRECAO
  REPROVADO_DSAU
  CANCELADO
  APROVADO
  APROVADO_DSAU
}

enum ActionType {
  CRIACAO
  ORCAMENTO
  ESCOLHA_OMS
  APROVACAO
  REPROVACAO
  CANCELAMENTO
}

enum Role {
  SUPERADMIN
  OPERADOR_FUSEX
  CHEFE_FUSEX
  AUDITOR
  CHEFE_AUDITORIA
  ESPECIALISTA
  CHEFE_DIV_MEDICINA
  COTADOR
  HOMOLOGADOR
  CHEM
  CHEFE_SECAO_REGIONAL
  OPERADOR_SECAO_REGIONAL
  DRAS
  SUBDIRETOR_SAUDE
}

model User {
  id                     String             @id @default(uuid())
  email                  String             @unique
  cpf                    String             @unique
  password               String
  name                   String
  role                   Role
  organization           Organization?      @relation(fields: [organizationId], references: [id])
  organizationId         String?
  createdAt              DateTime           @default(now())
  region                 Region?            @relation(fields: [regionId], references: [id])
  regionId               String?
  actions                ActionLog[]
  formulariosRegistrados FormularioMedico[] @relation("UserFormularioMedico")
  formulariosChefeDivMed4 FormularioMedicoChefeDiv4[] @relation("UserFormularioChefeDivMed4")
  custos                 Custo[]
}

model FormularioMedicoChefeDiv4 {
  id             String    @id @default(uuid())
  requestId      String
  parecerTecnico String
  observacoes    String?
  aprovado       Boolean   @default(false)
  userId         String
  createdAt      DateTime  @default(now()) @db.Timestamp(6)

  // Relações
  request        Request   @relation(fields: [requestId], references: [id], onDelete: Cascade)
  user           User      @relation("UserFormularioChefeDivMed4", fields: [userId], references: [id], onDelete: Cascade)

  @@index([requestId])
  @@index([userId])
}

model Organization {
  id               String            @id @default(uuid())
  name             String
  users            User[]
  region           Region            @relation(fields: [regionId], references: [id], onDelete: Cascade)
  regionId         String
  sentRequests     Request[]
  receivedRequests RequestResponse[]
}

model Region {
  id            String         @id @default(uuid())
  name          String
  organizations Organization[]
  users         User[]
}

model Pacient {
  cpf         String    @id
  precCp      String    @unique
  name        String
  rank        String
  isDependent Boolean
  requests    Request[]
}

model Request {
  id                       String            @id @default(uuid())
  description              String?
  pacient                  Pacient           @relation(fields: [pacientCpf], references: [cpf], onDelete: Cascade)
  pacientCpf               String
  sender                   Organization      @relation(fields: [senderId], references: [id], onDelete: Cascade)
  senderId                 String
  requestResponses         RequestResponse[]
  requestedOrganizationIds String[]
  status                   RequestStatus     @default(AGUARDANDO_CHEFE_FUSEX_1)
  cbhpmCode                String
  needsCompanion           Boolean
  opmeCost                 Float
  psaCost                  Float?
  createdAt                DateTime          @default(now())
  updatedAt                DateTime          @updatedAt
  actions                  ActionLog[]
  formulariosRegistrados   FormularioMedico[]
  formulariosChefeDivMed4 FormularioMedicoChefeDiv4[]
  custos                  Custo[]
}

model RequestResponse {
  id            String        @id @default(uuid())
  request       Request       @relation(fields: [requestId], references: [id], onDelete: Cascade)
  requestId     String
  receiver      Organization  @relation(fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId    String
  status        RequestStatus @default(AGUARDANDO_HOMOLOGADOR_SOLICITADA_1)
  opmeCost      Float?
  procedureCost Float?
  ticketCost    Float?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  actions       ActionLog[]
  selected      Boolean       @default(false)

  @@unique([requestId, receiverId])
}

model ActionLog {
  id                String           @id @default(uuid())
  request           Request?         @relation(fields: [requestId], references: [id], onDelete: Cascade)
  requestId         String?
  requestResponse   RequestResponse? @relation(fields: [requestResponseId], references: [id])
  requestResponseId String?
  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String
  action            ActionType
  observation       String?
  files             String[]
  createdAt         DateTime         @default(now())
}

model FormularioMedico {
  id                           String   @id @default(uuid())
  // Dados do beneficiário
  nomeBeneficiario             String
  precCpMatriculaCpf           String
  idade                        String
  postoGraduacaoTitular        String
  necessitaAcompanhante        Boolean
  consultaExame                String
  
  // Divisão de Medicina
  profissionalCiente           Boolean
  justificativaProfissionalCiente String?
  
  // Depósito de Material Cirúrgico
  materialDisponivel           Boolean
  justificativaMaterialDisponivel String?
  
  // Centro Cirúrgico
  pacienteNoMapa               Boolean
  justificativaPacienteNoMapa  String?
  setorEmCondicoes             Boolean
  justificativaSetorEmCondicoes String?
  
  // Unidade de Internação
  leitoReservado               Boolean?
  justificativaLeitoReservado  String?
  
  // Relacionamento com a solicitação
  request                      Request? @relation(fields: [requestId], references: [id])
  requestId                    String?
  
  // Assistência Social
  hotelReservado               Boolean?
  justificativaHotelReservado  String?
  
  // Traslado
  motorista1                   String?
  horario1                     String?
  motorista2                   String?
  horario2                     String?
  motorista3                   String?
  horario3                     String?
  motorista4                   String?
  horario4                     String?
  
  // Aprovação
  aprovacao                    Boolean? @default(false)
  
  // Metadados
  criadoPor                    User     @relation("UserFormularioMedico", fields: [criadoPorId], references: [id])
  criadoPorId                  String
  createdAt                    DateTime @default(now())
  updatedAt                    DateTime @updatedAt
}

model Custo {
  id          String   @id @default(uuid())
  descricao   String
  valor       Float
  request     Request? @relation(fields: [requestId], references: [id])
  requestId   String?
  usuario     User     @relation(fields: [usuarioId], references: [id])
  usuarioId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([requestId])
}
