/**
 * Script simples para verificar se a l√≥gica de filtro est√° correta
 */

console.log('üß™ Testando l√≥gica de filtro CHEFE_DIV_MEDICINA_4...\n');

// Simulando dados de uma solicita√ß√£o
const mockRequest = {
  id: 'test-123',
  status: 'AGUARDANDO_CHEFE_DIV_MEDICINA_4',
  senderId: 'pmpv', // PMPV √© o remetente
  requestedOrganizationIds: ['hce'], // HCE √© o destino
  requestResponses: [
    {
      id: 'resp-1',
      receiverId: 'hce', // Resposta para HCE
      selected: true,
      status: 'AGUARDANDO_CHEFE_DIV_MEDICINA_4'
    },
    {
      id: 'resp-2',
      receiverId: 'pmpv', // Resposta para PMPV
      selected: false,
      status: 'AGUARDANDO_CHEFE_DIV_MEDICINA_4'
    }
  ]
};

// Simulando usu√°rios CHEFE_DIV_MEDICINA
const hceUser = {
  organizationId: 'hce',
  role: 'CHEFE_DIV_MEDICINA',
  name: 'Chefe HCE'
};

const pmpvUser = {
  organizationId: 'pmpv',
  role: 'CHEFE_DIV_MEDICINA',
  name: 'Chefe PMPV'
};

// Fun√ß√£o que simula o filtro da API
function shouldShowRequestForUser(request, user) {
  // L√≥gica atual da API
  const userOrganizationId = user.organizationId;
  
  // Para CHEFE_DIV_MEDICINA_4, verificar se:
  // 1. Status da solicita√ß√£o √© AGUARDANDO_CHEFE_DIV_MEDICINA_4
  // 2. Existe uma resposta selecionada para a organiza√ß√£o do usu√°rio
  
  if (request.status === 'AGUARDANDO_CHEFE_DIV_MEDICINA_4') {
    const selectedResponseForUser = request.requestResponses.find(resp => 
      resp.receiverId === userOrganizationId && resp.selected === true
    );
    
    return !!selectedResponseForUser;
  }
  
  return false;
}

// Testando para o usu√°rio do HCE
console.log('üë§ Testando para usu√°rio CHEFE_DIV_MEDICINA do HCE:');
console.log(`   Organiza√ß√£o: ${hceUser.organizationId}`);
const shouldShowForHce = shouldShowRequestForUser(mockRequest, hceUser);
console.log(`   Deveria aparecer? ${shouldShowForHce ? '‚úÖ Sim' : '‚ùå N√£o'}`);
console.log(`   Est√° correto? ${shouldShowForHce ? '‚úÖ Sim (HCE √© o destino)' : '‚ùå N√£o, deveria aparecer'}`);

console.log('\nüë§ Testando para usu√°rio CHEFE_DIV_MEDICINA do PMPV:');
console.log(`   Organiza√ß√£o: ${pmpvUser.organizationId}`);
const shouldShowForPmpv = shouldShowRequestForUser(mockRequest, pmpvUser);
console.log(`   Deveria aparecer? ${shouldShowForPmpv ? '‚úÖ Sim' : '‚ùå N√£o'}`);
console.log(`   Est√° correto? ${!shouldShowForPmpv ? '‚úÖ Sim (PMPV √© o remetente, n√£o deve aparecer)' : '‚ùå N√£o, n√£o deveria aparecer'}`);

console.log('\nüìä Resumo:');
if (shouldShowForHce && !shouldShowForPmpv) {
  console.log('‚úÖ CORRE√á√ÉO FUNCIONOU: Aparece apenas para HCE (destino), n√£o para PMPV (remetente)');
} else if (shouldShowForHce && shouldShowForPmpv) {
  console.log('‚ùå PROBLEMA AINDA EXISTE: Aparece para ambas as organiza√ß√µes');
} else if (!shouldShowForHce && !shouldShowForPmpv) {
  console.log('‚ö†Ô∏è  POSS√çVEL PROBLEMA: N√£o aparece para nenhuma organiza√ß√£o');
} else {
  console.log('‚ùì SITUA√á√ÉO INESPERADA');
}

console.log('\nüîç Detalhes da resposta selecionada:');
const selectedResponse = mockRequest.requestResponses.find(r => r.selected);
if (selectedResponse) {
  console.log(`   Organiza√ß√£o receptora: ${selectedResponse.receiverId}`);
  console.log(`   Est√° nas organiza√ß√µes de destino? ${mockRequest.requestedOrganizationIds.includes(selectedResponse.receiverId) ? '‚úÖ Sim' : '‚ùå N√£o'}`);
} else {
  console.log('   ‚ùå Nenhuma resposta selecionada');
}
