/**
 * Script para testar se o filtro CHEFE_DIV_MEDICINA_4 est√° funcionando corretamente
 */
import { PrismaClient, RequestStatus, Role } from '@prisma/client';

const prisma = new PrismaClient();

async function testChefeDivMedicinaFiltering() {
  console.log('üß™ Testando filtro CHEFE_DIV_MEDICINA_4...\n');

  try {
    // 1. Buscar solicita√ß√µes com status AGUARDANDO_CHEFE_DIV_MEDICINA_4
    const requestsChefeDivMed = await prisma.request.findMany({
      where: {
        status: RequestStatus.AGUARDANDO_CHEFE_DIV_MEDICINA_4
      },
      include: {
        sender: {
          select: {
            id: true,
            name: true,
            region: {
              select: {
                name: true
              }
            }
          }
        },
        requestResponses: {
          include: {
            receiver: {
              select: {
                id: true,
                name: true
              }
            }
          }
        }
      }
    });

    console.log(`üìä Encontradas ${requestsChefeDivMed.length} solicita√ß√µes com status AGUARDANDO_CHEFE_DIV_MEDICINA_4`);

    if (requestsChefeDivMed.length === 0) {
      console.log('‚ÑπÔ∏è  Nenhuma solicita√ß√£o encontrada com este status');
      return;
    }

    // 2. Para cada solicita√ß√£o, verificar as respostas
    for (const request of requestsChefeDivMed) {
      console.log(`\nüî∏ Solicita√ß√£o ID: ${request.id}`);
      console.log(`   üì§ Enviada por: ${request.sender.name} (${request.sender.region?.name})`);
      console.log(`   üéØ Organiza√ß√µes de destino: ${request.requestedOrganizationIds.join(', ')}`);
      console.log(`   üìã Total de respostas: ${request.requestResponses.length}`);

      // Verificar qual resposta est√° selecionada
      const selectedResponse = request.requestResponses.find(r => r.selected);
      if (selectedResponse) {
        console.log(`   ‚úÖ Resposta selecionada: ${selectedResponse.receiver.name} (ID: ${selectedResponse.receiverId})`);
        
        // Verificar se a organiza√ß√£o selecionada est√° no requestedOrganizationIds
        const isCorrectDestination = request.requestedOrganizationIds.includes(selectedResponse.receiverId);
        console.log(`   üéØ Est√° nas organiza√ß√µes de destino? ${isCorrectDestination ? '‚úÖ Sim' : '‚ùå N√£o'}`);
        
        if (!isCorrectDestination) {
          console.log(`   ‚ö†Ô∏è  PROBLEMA: A resposta selecionada (${selectedResponse.receiver.name}) n√£o est√° nas organiza√ß√µes de destino!`);
        }
      } else {
        console.log(`   ‚ùå Nenhuma resposta selecionada`);
      }

      // Listar todas as respostas
      console.log(`   üìù Todas as respostas:`);
      request.requestResponses.forEach((response, index) => {
        console.log(`      ${index + 1}. ${response.receiver.name} - Selected: ${response.selected}, Status: ${response.status}`);
      });
    }

    // 3. Buscar usu√°rios CHEFE_DIV_MEDICINA das organiza√ß√µes
    console.log('\nüë• Usu√°rios CHEFE_DIV_MEDICINA por organiza√ß√£o:');
    
    // Obter todas as organiza√ß√µes que aparecem nas solicita√ß√µes
    const allOrgIds = new Set<string>();
    requestsChefeDivMed.forEach(req => {
      req.requestedOrganizationIds.forEach(id => allOrgIds.add(id));
      req.requestResponses.forEach(resp => allOrgIds.add(resp.receiverId));
    });

    const organizations = await prisma.organization.findMany({
      where: {
        id: {
          in: Array.from(allOrgIds)
        }
      },
      include: {
        users: {
          where: {
            role: Role.CHEFE_DIV_MEDICINA
          },
          select: {
            id: true,
            name: true
          }
        }
      }
    });

    organizations.forEach(org => {
      console.log(`   üè¢ ${org.name}: ${org.users.length} usu√°rio(s) CHEFE_DIV_MEDICINA`);
      org.users.forEach(user => {
        console.log(`      - ${user.name}`);
      });
    });

    // 4. Simular o filtro que seria aplicado na API
    console.log('\nüîç Simulando filtro da API para diferentes organiza√ß√µes:');
    
    for (const org of organizations) {
      if (org.users.length > 0) {
        console.log(`\n   Para usu√°rio CHEFE_DIV_MEDICINA da ${org.name}:`);
        
        // Aplicar o mesmo filtro que est√° na API
        const filteredRequests = requestsChefeDivMed.filter(request => {
          const selectedResponse = request.requestResponses.find(r => r.selected);
          return selectedResponse && selectedResponse.receiverId === org.id;
        });
        
        console.log(`   üìä Solicita√ß√µes que apareceriam: ${filteredRequests.length}`);
        filteredRequests.forEach(req => {
          console.log(`      - Solicita√ß√£o ${req.id} (de ${req.sender.name})`);
        });
      }
    }

  } catch (error) {
    console.error('‚ùå Erro:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Executar o teste
testChefeDivMedicinaFiltering();
