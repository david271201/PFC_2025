import { PrismaClient, Role } from '@prisma/client';

const prisma = new PrismaClient();

async function verificarUsuarios() {
  try {
    console.log('üë• Verificando usu√°rios no banco de dados...\n');
    
    const users = await prisma.user.findMany({
      select: {
        id: true,
        name: true,
        email: true,
        role: true
      }
    });
    
    console.log(`üìä Total de usu√°rios: ${users.length}\n`);
    
    const subdiretor = users.filter(user => user.role === Role.SUBDIRETOR_SAUDE);
    console.log(`üéØ Usu√°rios com role SUBDIRETOR_SAUDE: ${subdiretor.length}\n`);
    
    if (subdiretor.length === 0) {
      console.log('‚ùå Nenhum usu√°rio com role SUBDIRETOR_SAUDE encontrado!');
      console.log('üí° Criando um usu√°rio de teste com role SUBDIRETOR_SAUDE...\n');
      
      // Criar usu√°rio subdiretor de teste
      const novoSubdiretor = await prisma.user.create({
        data: {
          name: 'Subdiretor Teste',
          email: 'subdiretor@teste.com',
          cpf: '00000000001',
          password: 'senha123', // Em produ√ß√£o seria hasheada
          role: Role.SUBDIRETOR_SAUDE
        }
      });
      
      console.log('‚úÖ Usu√°rio SUBDIRETOR_SAUDE criado:');
      console.log(`   Nome: ${novoSubdiretor.name}`);
      console.log(`   Email: ${novoSubdiretor.email}`);
      console.log(`   Role: ${novoSubdiretor.role}\n`);
    } else {
      console.log('‚úÖ Usu√°rios SUBDIRETOR_SAUDE encontrados:');
      subdiretor.forEach((user, index) => {
        console.log(`${index + 1}. ${user.name} (${user.email}) - ${user.role}`);
      });
      console.log('');
    }
    
    console.log('üìã Todos os usu√°rios:');
    users.forEach((user, index) => {
      console.log(`${index + 1}. ${user.name} (${user.email}) - ${user.role}`);
    });
    
  } catch (error) {
    console.error('‚ùå Erro ao verificar usu√°rios:', error);
  } finally {
    await prisma.$disconnect();
  }
}

verificarUsuarios();
