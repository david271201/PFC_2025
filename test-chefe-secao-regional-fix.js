// Script para testar a corre√ß√£o do roteamento CHEFE_SECAO_REGIONAL
console.log('üß™ TESTE: Corre√ß√£o do roteamento CHEFE_SECAO_REGIONAL por status');
console.log('');

// Simula√ß√£o da nova l√≥gica baseada no tipo de usu√°rio e status
function simulateChefSecaoRegionalFilter(userType, organizationsInDatabase) {
  // Se o usu√°rio tem organizationId, √© para AGUARDANDO_CHEFE_SECAO_REGIONAL_3
  if (userType.organizationId) {
    console.log(`üìã Usu√°rio com organizationId: ${userType.organizationId} - Usa l√≥gica espec√≠fica para CHEFE_SECAO_REGIONAL_3`);
    return null; // L√≥gica especial n√£o simulada aqui
  }
  
  // Se o usu√°rio n√£o tem organizationId, √© para AGUARDANDO_CHEFE_SECAO_REGIONAL_1 e 2
  console.log(`üìã Usu√°rio sem organizationId - Usa l√≥gica de regi√£o de destino`);
  return organizationsInDatabase
    .filter(org => org.regionId === userType.regionId)
    .map(org => org.id);
}

// Simula√ß√£o dos dados do banco
const organizationsInDatabase = [
  { id: 'pmpv', name: 'PMPV - Policl√≠nica Militar da Praia Vermelha', regionId: '1RM' },
  { id: 'hce', name: 'HCE - Hospital Central do Ex√©rcito', regionId: '1RM' },
  { id: 'hmasp', name: 'HMASP - Hospital Militar de √Årea de S√£o Paulo', regionId: '2RM' }
];

// Cen√°rios de usu√°rios CHEFE_SECAO_REGIONAL
const usuariosChefes = [
  {
    nome: 'CHEFE_SECAO_REGIONAL da 1RM (para status 1 e 2)',
    role: 'CHEFE_SECAO_REGIONAL',
    regionId: '1RM',
    organizationId: null // Sem organizationId = status 1 e 2
  },
  {
    nome: 'CHEFE_SECAO_REGIONAL da 2RM (para status 1 e 2)',
    role: 'CHEFE_SECAO_REGIONAL', 
    regionId: '2RM',
    organizationId: null // Sem organizationId = status 1 e 2
  },
  {
    nome: 'CHEFE_SECAO_REGIONAL do PMPV (para status 3)',
    role: 'CHEFE_SECAO_REGIONAL',
    regionId: '1RM',
    organizationId: 'pmpv' // Com organizationId = status 3
  },
  {
    nome: 'CHEFE_SECAO_REGIONAL do HCE (para status 3)',
    role: 'CHEFE_SECAO_REGIONAL',
    regionId: '1RM',
    organizationId: 'hce' // Com organizationId = status 3
  }
];

// Simula√ß√£o de solicita√ß√µes
const solicitacoes = [
  {
    id: 'req1',
    senderId: 'pmpv', // 1RM
    requestedOrganizationIds: ['hce'], // 1RM
    status: 'AGUARDANDO_CHEFE_SECAO_REGIONAL_1',
    description: 'PMPV (1RM) ‚Üí HCE (1RM) - Status 1'
  },
  {
    id: 'req2', 
    senderId: 'pmpv', // 1RM
    requestedOrganizationIds: ['hmasp'], // 2RM
    status: 'AGUARDANDO_CHEFE_SECAO_REGIONAL_2',
    description: 'PMPV (1RM) ‚Üí HMASP (2RM) - Status 2'
  },
  {
    id: 'req3',
    senderId: 'hce', // 1RM
    requestedOrganizationIds: ['pmpv'], // 1RM
    status: 'AGUARDANDO_CHEFE_SECAO_REGIONAL_3',
    description: 'HCE (1RM) ‚Üí PMPV (1RM) - Status 3'
  }
];

console.log('üìã TESTANDO CEN√ÅRIOS:');
console.log('');

usuariosChefes.forEach((usuario, index) => {
  console.log(`CASO ${index + 1}: ${usuario.nome}`);
  
  const organizacoesVisiveisParaRegiao = simulateChefSecaoRegionalFilter(usuario, organizationsInDatabase);
  
  if (usuario.organizationId) {
    console.log('   ‚Üí Usa l√≥gica especial para AGUARDANDO_CHEFE_SECAO_REGIONAL_3 (n√£o testada aqui)');
  } else {
    console.log(`   ‚Üí Pode ver organiza√ß√µes da regi√£o ${usuario.regionId}: [${organizacoesVisiveisParaRegiao ? organizacoesVisiveisParaRegiao.join(', ') : 'nenhuma'}]`);
    
    solicitacoes.forEach(req => {
      // Para status 1 e 2, verifica se pelo menos uma organiza√ß√£o solicitada est√° na regi√£o
      if (req.status.includes('CHEFE_SECAO_REGIONAL_1') || req.status.includes('CHEFE_SECAO_REGIONAL_2')) {
        const canSee = organizacoesVisiveisParaRegiao && req.requestedOrganizationIds.some(orgId => organizacoesVisiveisParaRegiao.includes(orgId));
        console.log(`   ‚úì ${req.description}: ${canSee ? 'üü¢ DEVE VER' : 'üî¥ N√ÉO DEVE VER'}`);
      }
    });
  }
  
  console.log('');
});

console.log('üéØ RESULTADO ESPERADO:');
console.log('');
console.log('‚úÖ CHEFE_SECAO_REGIONAL da 1RM (status 1 e 2):');
console.log('   - DEVE ver: PMPV ‚Üí HCE (mesma regi√£o)');
console.log('   - N√ÉO deve ver: PMPV ‚Üí HMASP (regi√£o diferente)');
console.log('');
console.log('‚úÖ CHEFE_SECAO_REGIONAL da 2RM (status 1 e 2):');
console.log('   - DEVE ver: PMPV ‚Üí HMASP (organiza√ß√µes da sua regi√£o)');
console.log('   - N√ÉO deve ver: PMPV ‚Üí HCE (organiza√ß√µes de outra regi√£o)');
console.log('');
console.log('‚úÖ CHEFE_SECAO_REGIONAL com organizationId (status 3):');
console.log('   - Usa l√≥gica espec√≠fica baseada na organiza√ß√£o receptora');
console.log('   - N√ÉO afetado pela mudan√ßa (mant√©m comportamento existente)');
console.log('');
console.log('üîß CORRE√á√ÉO APLICADA:');
console.log('- CHEM: sempre usa l√≥gica de regi√£o de destino');
console.log('- CHEFE_SECAO_REGIONAL sem organizationId: usa l√≥gica de regi√£o de destino (status 1 e 2)');
console.log('- CHEFE_SECAO_REGIONAL com organizationId: usa l√≥gica espec√≠fica existente (status 3)');
