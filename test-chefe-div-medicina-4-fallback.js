/**
 * TESTE: Corre√ß√£o do Fallback no AGUARDANDO_CHEFE_DIV_MEDICINA_4
 * 
 * PROBLEMA IDENTIFICADO:
 * - No status AGUARDANDO_CHEFE_DIV_MEDICINA_4, quando a organiza√ß√£o de destino (HMASP) 
 *   n√£o possui usu√°rios com papel CHEFE_DIV_MEDICINA, o fallback estava direcionando
 *   para a primeira organiza√ß√£o em requestedOrganizationIds[0], que poderia ser
 *   a organiza√ß√£o remetente (HCE) ao inv√©s da de destino.
 * 
 * SOLU√á√ÉO IMPLEMENTADA:
 * - Modificar o fallback para priorizar organiza√ß√µes de destino que N√ÉO sejam
 *   a organiza√ß√£o remetente
 * - Filtrar requestedOrganizationIds excluindo senderId
 * - Usar a primeira organiza√ß√£o filtrada como fallback
 */

console.log('üß™ TESTE: Corre√ß√£o Fallback CHEFE_DIV_MEDICINA_4');
console.log('=' .repeat(60));

// Simula√ß√£o de dados
const simulateRequest = {
  id: 'req123',
  senderId: 'hce',           // Organiza√ß√£o REMETENTE (HCE - 1RM)
  requestedOrganizationIds: ['hce', 'hmasp'],  // Organiza√ß√µes de DESTINO (incluindo a pr√≥pria HCE + HMASP)
  status: 'AGUARDANDO_CHEM_2'
};

const organizationsInDatabase = [
  { id: 'hce', name: 'HCE', regionId: '1RM', hasChefeDivMedicina: false },      // Remetente, sem CHEFE_DIV_MEDICINA
  { id: 'hmasp', name: 'HMASP', regionId: '2RM', hasChefeDivMedicina: false }  // Destino, sem CHEFE_DIV_MEDICINA
];

console.log('üìã CEN√ÅRIO DE TESTE:');
console.log(`   Organiza√ß√£o Remetente: ${simulateRequest.senderId} (HCE)`);
console.log(`   Organiza√ß√µes Solicitadas: [${simulateRequest.requestedOrganizationIds.join(', ')}]`);
console.log(`   Problema: Nenhuma organiza√ß√£o tem usu√°rios CHEFE_DIV_MEDICINA`);
console.log('');

// Simular a l√≥gica ANTES da corre√ß√£o
function simulateOldFallbackLogic(request) {
  const firstDestinationOrgId = request.requestedOrganizationIds[0];
  return {
    targetOrgId: firstDestinationOrgId,
    logic: 'ANTIGA: Pega primeira organiza√ß√£o da lista'
  };
}

// Simular a l√≥gica DEPOIS da corre√ß√£o
function simulateNewFallbackLogic(request) {
  const destinationOrgsExcludingSender = request.requestedOrganizationIds.filter(
    orgId => orgId !== request.senderId
  );
  
  const targetOrgId = destinationOrgsExcludingSender.length > 0 
    ? destinationOrgsExcludingSender[0] 
    : request.requestedOrganizationIds[0];
    
  return {
    targetOrgId: targetOrgId,
    excludedSender: destinationOrgsExcludingSender,
    logic: 'NOVA: Prioriza organiza√ß√µes que n√£o sejam a remetente'
  };
}

console.log('üî¥ L√ìGICA ANTIGA (PROBLEM√ÅTICA):');
const oldResult = simulateOldFallbackLogic(simulateRequest);
const oldTargetOrg = organizationsInDatabase.find(org => org.id === oldResult.targetOrgId);
console.log(`   ‚Üí ${oldResult.logic}`);
console.log(`   ‚Üí Resultado: ${oldTargetOrg?.name} (${oldResult.targetOrgId})`);
console.log(`   ‚Üí ‚ùå PROBLEMA: Direcionou para a organiza√ß√£o REMETENTE!`);
console.log('');

console.log('üü¢ L√ìGICA NOVA (CORRIGIDA):');
const newResult = simulateNewFallbackLogic(simulateRequest);
const newTargetOrg = organizationsInDatabase.find(org => org.id === newResult.targetOrgId);
console.log(`   ‚Üí ${newResult.logic}`);
console.log(`   ‚Üí Organiza√ß√µes excluindo remetente: [${newResult.excludedSender.join(', ')}]`);
console.log(`   ‚Üí Resultado: ${newTargetOrg?.name} (${newResult.targetOrgId})`);
console.log(`   ‚Üí ‚úÖ CORRETO: Direcionou para organiza√ß√£o de DESTINO!`);
console.log('');

// Teste de caso extremo
console.log('üß™ TESTE DE CASO EXTREMO:');
console.log('   Cen√°rio: requestedOrganizationIds cont√©m apenas a organiza√ß√£o remetente');

const extremeCase = {
  senderId: 'hce',
  requestedOrganizationIds: ['hce']  // S√≥ a pr√≥pria organiza√ß√£o remetente
};

const extremeResult = simulateNewFallbackLogic(extremeCase);
console.log(`   ‚Üí Organiza√ß√µes excluindo remetente: [${extremeResult.excludedSender.join(', ')}]`);
console.log(`   ‚Üí Resultado: ${extremeResult.targetOrgId}`);
console.log(`   ‚Üí ‚úÖ Fallback seguro: usa a primeira da lista original quando n√£o h√° outras op√ß√µes`);
console.log('');

console.log('üéØ RESUMO DA CORRE√á√ÉO:');
console.log('');
console.log('‚úÖ ANTES vs DEPOIS:');
console.log(`   ANTES: HCE ‚Üí [hce, hmasp] ‚Üí Fallback para "hce" (REMETENTE ‚ùå)`);
console.log(`   DEPOIS: HCE ‚Üí [hce, hmasp] ‚Üí Fallback para "hmasp" (DESTINO ‚úÖ)`);
console.log('');
console.log('üìÅ ARQUIVOS MODIFICADOS:');
console.log('   ‚Üí /pages/api/requests/[requestId]/status.ts');
console.log('     - Adicionado senderId ao select da consulta');
console.log('     - Modificado fallback para filtrar organiza√ß√µes excludindo remetente');
console.log('     - Adicionado logging detalhado para debugging');
console.log('');
console.log('üîß MUDAN√áAS T√âCNICAS:');
console.log('   1. Filtro: requestedOrganizationIds.filter(orgId => orgId !== request.senderId)');
console.log('   2. Prioriza√ß√£o: usa primeira organiza√ß√£o n√£o-remetente quando dispon√≠vel');
console.log('   3. Fallback seguro: usa lista original se s√≥ houver organiza√ß√£o remetente');
console.log('   4. Logging melhorado: mostra qual organiza√ß√£o foi escolhida e por qu√™');
console.log('');
console.log('‚úÖ PROBLEMA RESOLVIDO: Solicita√ß√µes n√£o ser√£o mais direcionadas incorretamente para a organiza√ß√£o remetente no status AGUARDANDO_CHEFE_DIV_MEDICINA_4!');
