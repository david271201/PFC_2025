import { PrismaClient, Role } from '@prisma/client';

const prisma = new PrismaClient();

async function testeCompletoCarregamentoPacientes() {
  try {
    console.log('üß™ TESTE COMPLETO: Carregamento de Pacientes\n');
    
    // 1. Verificar estrutura dos dados
    console.log('üìä 1. Estrutura dos dados no banco:');
    const pacients = await prisma.pacient.findMany({
      include: {
        _count: {
          select: {
            requests: true
          }
        }
      },
      orderBy: {
        name: 'asc'
      }
    });
    
    console.log(`   Total de pacientes: ${pacients.length}`);
    
    if (pacients.length === 0) {
      console.log('   ‚ùå Nenhum paciente encontrado!\n');
      return;
    }
    
    console.log('   üìã Pacientes encontrados:');
    pacients.forEach((pacient, index) => {
      console.log(`   ${index + 1}. ${pacient.name}`);
      console.log(`      CPF: ${pacient.cpf}`);
      console.log(`      Prec CP: ${pacient.precCp}`);
      console.log(`      Posto: "${pacient.rank}"`);
      console.log(`      Dependente: ${pacient.isDependent}`);
      console.log(`      Solicita√ß√µes: ${pacient._count.requests}`);
      console.log('');
    });
    
    // 2. Verificar se as patentes s√£o v√°lidas segundo o novo array
    console.log('üéñÔ∏è 2. Valida√ß√£o de patentes:');
    const MILITARY_RANKS = [
      '2¬∫ Tenente',
      'Segundo Tenente',
      '1¬∫ Tenente', 
      'Primeiro Tenente',
      'Capit√£o',
      'Major',
      'Tenente-Coronel',
      'Coronel',
      'General de Brigada',
      'General de Divis√£o',
      'General de Ex√©rcito',
      'Marechal',
      'Dependente'
    ];
    
    const patentesInvalidas = [];
    pacients.forEach(pacient => {
      const isValid = MILITARY_RANKS.includes(pacient.rank);
      if (!isValid) {
        patentesInvalidas.push({ name: pacient.name, rank: pacient.rank });
      }
      console.log(`   "${pacient.rank}" ‚Üí ${isValid ? '‚úÖ V√°lida' : '‚ùå Inv√°lida'}`);
    });
    
    if (patentesInvalidas.length > 0) {
      console.log('\n   ‚ö†Ô∏è Patentes inv√°lidas encontradas:');
      patentesInvalidas.forEach(p => {
        console.log(`      ${p.name}: "${p.rank}"`);
      });
    } else {
      console.log('\n   ‚úÖ Todas as patentes s√£o v√°lidas!');
    }
    
    // 3. Simular resposta da API
    console.log('\nüì° 3. Simula√ß√£o da resposta da API:');
    const apiResponse = {
      pacients: pacients,
      pagination: {
        page: 1,
        limit: 10,
        total: pacients.length,
        pages: Math.ceil(pacients.length / 10)
      }
    };
    
    console.log('   ‚úÖ Estrutura da resposta:');
    console.log(`      pacients: array com ${apiResponse.pacients.length} itens`);
    console.log(`      pagination.total: ${apiResponse.pagination.total}`);
    console.log(`      pagination.pages: ${apiResponse.pagination.pages}`);
    
    // 4. Verificar filtros (simular filtros aplicados no frontend)
    console.log('\nüîç 4. Teste de filtros:');
    
    // Filtro por dependente
    const dependentes = pacients.filter(p => p.isDependent === true);
    const titulares = pacients.filter(p => p.isDependent === false);
    
    console.log(`   Dependentes: ${dependentes.length}`);
    console.log(`   Titulares: ${titulares.length}`);
    
    // 5. Debug espec√≠fico do paciente mencionado
    console.log('\nüéØ 5. Debug do paciente CPF 12345678901:');
    const pacienteEspecifico = pacients.find(p => p.cpf === '12345678901');
    
    if (pacienteEspecifico) {
      console.log('   ‚úÖ Paciente encontrado:');
      console.log(`      Nome: "${pacienteEspecifico.name}"`);
      console.log(`      CPF: "${pacienteEspecifico.cpf}"`);
      console.log(`      Prec CP: "${pacienteEspecifico.precCp}"`);
      console.log(`      Posto: "${pacienteEspecifico.rank}"`);
      console.log(`      Dependente: ${pacienteEspecifico.isDependent}`);
      console.log(`      Solicita√ß√µes: ${pacienteEspecifico._count.requests}`);
      
      // Verificar se seria inclu√≠do nos filtros padr√£o
      const incluirNoFiltro = MILITARY_RANKS.includes(pacienteEspecifico.rank);
      console.log(`      Inclu√≠do no filtro: ${incluirNoFiltro ? '‚úÖ Sim' : '‚ùå N√£o'}`);
      
    } else {
      console.log('   ‚ùå Paciente CPF 12345678901 n√£o encontrado');
    }
    
    // 6. Verificar configura√ß√µes do frontend
    console.log('\n‚öôÔ∏è 6. Poss√≠veis problemas no frontend:');
    console.log('   ‚Ä¢ Verificar se a autentica√ß√£o est√° funcionando');
    console.log('   ‚Ä¢ Verificar se o role SUBDIRETOR_SAUDE est√° correto');
    console.log('   ‚Ä¢ Verificar se h√° erros de JavaScript no console');
    console.log('   ‚Ä¢ Verificar se os filtros est√£o sendo aplicados incorretamente');
    console.log('   ‚Ä¢ Verificar se o estado dos pacientes est√° sendo atualizado');
    
    console.log('\n‚úÖ Teste completo finalizado!');
    
  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error);
  } finally {
    await prisma.$disconnect();
  }
}

testeCompletoCarregamentoPacientes();
